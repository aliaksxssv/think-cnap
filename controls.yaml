security_domains:
  - name: Security Foundations
    security_controls:
      - code: SEC01-BP01
        text: Separate workloads using accounts
        action_items:
          - measure_id: SEC01-BP01-001
            measure: 'MITIGATION: Automate the process of AWS accounts provisioning and deprovisioning'
            comment: >-
              Use <a href='https://aws.amazon.com/organizations/' target='_blank'>AWS Organizations</a> and  <a
              href='https://aws.amazon.com/controltower/' target='_blank'>AWS Control Tower</a> to  manage multi-account
              structure. <br><br> <strong>Key Benefits:</strong> <br>• Better blast radius control <br>• Compliance
              boundaries <br>• Centralized billing and management"
            mitre: undefined
            tags: aws
          - measure_id: SEC01-BP01-002
            measure: 'MITIGATION: Implement AWS accounts separation'
            comment: >-
              <strong>Recommended approach:</strong> <br>• Environment separation: dev/staging/prod <br>• Workload
              separation: by application or team <br>• Use namespaces for logical separation within clusters
            mitre: undefined
            tags: aws
          - measure_id: SEC01-BP01-003
            measure: 'MITIGATION: Automate the process of Kubernetes cluster provisioning and deprovisioning'
            comment: Use AWS Terraform modules to provision and deprovision Kubernetes clusters
            mitre: undefined
            tags: kubernetes
          - measure_id: SEC01-BP01-004
            measure: 'MITIGATION: Implement kubernetes workloads separation'
            comment: >-
              <strong>Recommended approach:</strong> <br>• Environment separation: dev/staging/prod <br>• Workload
              separation: by application or team <br>• Use namespaces for logical separation within clusters
            mitre: undefined
            tags: kubernetes
      - code: SEC01-BP02
        text: Secure account root user and properties
        action_items:
          - measure_id: SEC01-BP02-001
            measure: >-
              MITIGATION: Don't use root user for business as usual tasks
            comment: >-
              Configure MFA for the root user. Don't create access and secret keys for the root user.
              <br>
              <br>
              Enable centralized root access in IAM and delete root user credentials for the AWS 
              Organizations member accounts
            mitre: undefined
            tags: aws
          - measure_id: SEC01-BP02-002
            measure: >-
              DETECTION: Implement root user activity monitoring
            comment: >-
              Configure root user usage monitoring via AWS CloudTrail logs or AWS GuardDuty  findings
              Policy:IAMUser/RootCredentialUsage and Policy:IAMUser/ShortTermRootCredentialUsage
            mitre: undefined
            tags: aws
      - code: SEC01-BP03
        text: Identify and validate control objectives
        action_items:
          - measure_id: SEC01-BP03-001
            measure: 'DETECTION: Manage security controls according to the risks'
            comment: >-
              Enable those security frameworks in your CSPM which are relevant to your workloads, adjust the severity of
              the controls.  <br> <br> In case of AWS SecurityHub Automations usage take into account that they are 
              region-linked, even if you congifure Delegated Administartor account and set home region for cross-account
              / cross-region security findings aggregation.  That means you need to configure the automations in each
              region you have in your Delegated Administartor account.
            mitre: undefined
            tags: aws
      - code: SEC01-BP04
        text: Stay up to date with security threats and recommendations
        action_items:
          - measure_id: SEC01-BP04-001
            measure: 'MITIGATION: Regular update security tools configuration'
            comment: Use AWS native tools like GuardDuty, SecurityHub, etc to delegate updates to the cloud provider
            mitre: DefenseEvasion:ImpairDefenses/DowngradeAttack
            tags: aws
      - code: SEC01-BP05
        text: Reduce security management scope
        action_items:
          - measure_id: SEC01-BP05-001
            measure: 'MITIGATION: Use AWS managed services like RDS to delegate control plane management to the cloud provider'
            comment: >-
              Managed services reduce operational overhead and provide built-in security features.  However, ensure you
              understand the shared responsibility model for each service.
            mitre: undefined
            tags: aws
          - measure_id: SEC01-BP05-002
            measure: 'MITIGATION: Use AWS EKS to delegate control plane management to the cloud provider'
            comment: >-
              AWS EKS provides a fully managed Kubernetes service that handles the control plane,  reducing the need for
              manual management. However, you still need to manage the worker nodes  and the application workloads
            mitre: undefined
            tags: kubernetes
      - code: SEC01-BP06
        text: Automate deployment of standard security controls
        action_items:
          - measure_id: SEC01-BP06-001
            measure: >-
              MITIGATION: Deploy security tools automatically
            comment: >-
              Use "auto-enable" feature for AWS GuardDuty and SecurityHub to automate  the process of security tools
              deployment and configuration. <br> <br> <strong>Key Benefits:</strong> <br>• Automate the process of
              security tools deployment <br>• Reduce the risk of human error <br>• Ensure consistent security posture
            mitre: undefined
            tags: aws
      - code: SEC01-BP07
        text: Identify threats and prioritize mitigations using a threat model
        action_items:
          - measure_id: SEC01-BP07-001
            measure: 'MITIGATION: Do threat modelling exercise for your workloads'
            comment: >-
              Take a look at AWS Workshop related <a target="_blank" class="new-window"
              href="https://catalog.workshops.aws/threatmodel/en-US">threat modelling</a> process <br> <br> <strong>Key
              Benefits:</strong> <br>• Identify potential security risks on early stage <br>• Prioritize mitigations
              based on risk level
            mitre: undefined
            tags: aws
      - code: SEC01-BP08
        text: Evaluate and implement new security services and features regularly
        action_items:
          - measure_id: SEC01-BP08-001
            measure: 'DETECTION: Subscribe to vendor updates to be aware of the latest security features and best practices'
            comment: >-
              Subscribe to <a target="_blank" class="new-window
              href="https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_sns.html">IDS AWS GuardDuty</a> and  <a
              target="_blank" class="new-window
              href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-announcements.html">CSPM AWS
              SecurityHub</a> product updates to stay up to date with the latest security features and best practices
            mitre: undefined
            tags: aws
  - name: Identity & Access Management
    security_controls:
      - code: SEC02-BP01
        text: Use strong sign-in mechanisms
        action_items:
          - measure_id: SEC02-BP01-001
            measure: >-
              MITIGATION: Configure AWS Password Policy and MFA
            mitre: undefined
            tags: aws
      - code: SEC02-BP02
        text: Use temporary credentials
        action_items:
          - measure_id: SEC02-BP02-001
            measure: >-
              MITIGATION: Use AWS IAM roles 
            comment: >-
              Avoid using IAM access and secret keys. Use AWS IAM roles for you services and third-party integrations to grant access to the AWS resources.
            mitre: undefined
            tags: aws
          - measure_id: SEC02-BP02-002
            measure: >- 
              MITIGATION: Enforce IMDS v2
            comment: >-
              IMDS v2 is more secure than IMDS v1. Use AWS Declarative Policy to enforce IMDS v2.
            mitre: undefined
            tags: aws
      - code: SEC02-BP03
        text: Store and use secrets securely
        action_items:
          - measure_id: SEC02-BP03-001
            measure: >- 
              MITIGATION: implement Secrets Management solution
            comment: >-
              Use AWS Secrets Manager to store and use secrets securely. Consider Hashicorp Vault as well.
            mitre: undefined
            tags: aws
          - measure_id: SEC02-BP03-002
            measure: >- 
              DETECTION: Implement AWS Health notifications
            comment: >-
              There is a notification regarding AWS IAM keys compromise detection.
            mitre: Reconnaissance:GatherVictimIdentityInformation
            tags: aws
      - code: SEC02-BP04
        text: Rely on a centralized identity provider
        action_items:
          - measure_id: SEC02-BP04-001
            measure: >-
              MITIGATION: Delegate Identity Management to the Identity Provider
            comment: >-
              Consider using centralized Identity Provider, enable SCIM. For example, AWS IAM Identity Center and IdP like Okta.
            mitre: undefined
            tags: aws
          - measure_id: SEC02-BP04-002
            measure: >-
              DETECTION: Detect new IAM users creation
            comment: >-
              Implement alerts for the new IAM users creation using AWS CloudTrail logs. 
              Configure exceptions for authorized user creation flow.
            mitre: Persistence:CreateAccount
            tags: aws
      - code: SEC02-BP05
        text: Audit and rotate credentials periodically
        action_items:
          - measure_id: SEC02-BP05-001
            measure: >-
              DETECTION: Detect unused IAM credentials like passwords and access keys
            comment: >-
              Conisder AWS IAM Access Analyzer to detect credentials based on inactivity 
              period and generate security finding in AWS SecurityHub
            mitre: InitialAccess:ValidAccounts/CloudAccounts
            tags: aws
          - measure_id: SEC02-BP05-002
            measure: >-
              MITIGATION: Rotate IAM credentials regularly
            comment: >-
              Automate the process of credentials rotation via integration with Secrets Management service. 
              <br>
              <br>
              Focus on IAM users with sensitive permissions.
              Use crowdsourced list of <a target="_blank" class="new-window" href="https://github.com/primeharbor/sensitive_iam_actions">sensitive IAM Actions</a>.
            mitre: undefined
            tags: aws
      - code: SEC02-BP06
        text: Employ user groups and attributes
        action_items:
          - measure_id: SEC02-BP06-001
            measure: >-
              MITIGATION: Use groups and attributes to manage identities 
            comment: >-
              Use departments, teams, projects, etc. to manage identities and simplify permissions management.
            mitre: undefined
            tags: aws
      - code: SEC03-BP01
        text: Define access requirements
        action_items:
          - measure_id: SEC03-BP01-001
            measure: >-
              MITIGATION: Implement Role Based Access Control (RBAC) in AWS
            comment: >-
              Consider AWS IAM roles and policies to manage access to the AWS resources.
            mitre: undefined
            tags: aws
          - measure_id: SEC03-BP01-002
            measure: >-
              MITIGATION: Implement Role Based Access Control (RBAC) in Kubernetes
            comment: >-
              Consider Kubernetes Roles and RoleBindings to manage access to the Kubernetes resources.
            mitre: undefined
            tags: kubernetes
      - code: SEC03-BP02
        text: Grant least privilege access
        action_items:
          - measure_id: SEC03-BP02-001
            measure: >-
              MITIGATION: Don't try to chase the tail
            comment: >-
              Find the balance between security and usability.
            mitre: undefined
            tags: aws
      - code: SEC03-BP03
        text: Establish emergency access process
        action_items:
          - measure_id: SEC03-BP03-001
            measure: >-
              MITIGATION: Establish emergency access process
            comment: >-
              Implement emergency access for the root user. Split the password / MFA between security team and infra team.
            mitre: undefined
            tags: aws
      - code: SEC03-BP04
        text: Reduce permissions continuously
        action_items:
          - measure_id: SEC03-BP04-001
            measure: >-
              MITIGATION: Reduce permissions continuously
            comment: >-
              Use AWS IAM Access Analyzer to detect unused permissions.
            mitre: undefined
            tags: aws
          - measure_id: SEC03-BP04-002
            measure: >-
              MITIGATION: Reduce container privileges 
            comment: >-
              Drop all capabilities and set only those which are needed. Don't use privileged containers.
            mitre: undefined
            tags: kubernetes
      - code: SEC03-BP05
        text: Define permission guardrails for your organization
        action_items:
          - measure_id: SEC03-BP05-001
            measure: >-
              MITIGATION: Define permission guardrails for your organization
            mitre: undefined
            tags: aws
      - code: SEC03-BP06
        text: Manage access based on lifecycle
        action_items:
          - measure_id: SEC03-BP06-001
            measure: >-
              MITIGATION: Manage access based on lifecycle
            comment: >-
              Remove access to the resources after they are no longer needed: user termination, project completion, etc.
            mitre: undefined
            tags: aws
      - code: SEC03-BP07
        text: Analyze public and cross-account access
        action_items:
          - measure_id: SEC03-BP07-001
            measure: >-
              MITIGATION: Analyze public and cross-account access
            comment: >-
              Deploy AWS IAM Access Analyzer and configure external access analyzer. Used delegated administrator AWS
              Account. This will allow you to detect public resources and cross-account access outside the trusted zone
              (your AWS Account or AWS Organization)
            mitre: Persistance:Account Manipulation/AdditionalCloudRoles
            tags: aws
      - code: SEC03-BP08
        text: Share resources securely within your organization
        action_items:
          - measure_id: SEC03-BP08-001
            measure: >-
              MITIGATION: Share resources securely within your organization
            comment: >-
              Add conditional access to the AWS resources. For example, allow access only from your AWS Organization. Read the
              <a target="_blank" class="new-window" href="https://aws.amazon.com/blogs/security/how-to-control-access-to-aws-resources-based-on-aws-account-ou-or-organization/">article</a> to learn more.
            mitre: undefined
            tags: aws
      - code: SEC03-BP09
        text: Share resources securely with a third party
        action_items:
          - measure_id: SEC03-BP09-001
            measure: >-
              MITIGATION: Share resources securely with a third party
            comment: >-
              Use AWS IAM External ID to share resources securely with a third party.
            mitre: undefined
            tags: aws
  - name: Detection
    security_controls:
      - code: SEC04-BP01
        text: Configure AWS logging
        action_items:
          - measure_id: SEC04-BP01-001
            measure: >-
              DETECTION: Configure AWS CloudTrail service
            comment: >-
              Configure AWS CloudTrail to get management and data events. Create multi-region
              trail and apply it to your AWS Organization. Export AWS CloudTrail logs to S3 bucket.
            mitre: DefenseEvasion:DisableOrModifyCloudLogs
            tags: aws
          - measure_id: SEC04-BP01-002
            measure: 'DETECTION: Configure Kubernetes audit logs'
            comment: >-
              Configure Kubernetes audit policy to catch API calls. In case of AWS EKS, audit logs 
              are stored in AWS CloudWatch
            mitre: DefenseEvasion:DisableOrModifyCloudLogs
            tags: kubernetes
          - measure_id: SEC04-BP01-003
            measure: >-
              MITIGATION: Protect the AWS logs
            comment: >-
              Enable AWS SSE-KMS encryption for AWS CloudTrail logs and log files validation.
              <br>
              <br>
              Configure SCP Policy to prevent the modification of AWS CloudTrail logging configuration.
            mitre: DefenseEvasion:DisableOrModifyCloudLogs
            tags: aws
      - code: SEC04-BP02
        text: Capture logs, findings, and metrics in standardized locations
        action_items:
          - measure_id: SEC04-BP02-001
            measure: >-
              DETECTION: Implement Security Information & Event Management platform (SIEM)
            comment: >-
              Consider deploying <a target="_blank" class="new-window"
              href="https://github.com/aws-samples/siem-on-amazon-opensearch-service">SIEM on 
              Amazon OpenSearch service</a> or use 
              <a target="_blank" class="new-window" href="https://www.elastic.co/elasticsearch">
              Elasticsearch</a>
              <br>
              <br>
              AWS Detective and Security Lake can be useful for this purpose as well. Keep in mind that 
              AWS Detective doesn't build relations between the affected resources and identities. This is a 
              limitation of the service which makes it less useful for security use cases. AWS Security Lake 
              allows to get access to the raw data from AWS Detective interface.
            mitre: undefined
            tags: aws
      - code: SEC04-BP03
        text: Correlate and enrich security alerts
        action_items:
          - measure_id: SEC04-BP03-001
            measure: >- 
              DETECTION: Implement Intrusion Detection System (IDS)
            comment: >-
              Deploy AWS GuardDuty to detect suspicious API calls and network activity.
            mitre: undefined
            tags: aws
          - measure_id: SEC04-BP03-002
            measure: >-
              DETECTION: Implement Kubernetes Audit Log Analysis
            comment: >- 
              In case of AWS EKS usage, AWS GuardDuty has EKS Protection feature. 
            mitre: undefined
            tags: kubernetes
          - measure_id: SEC04-BP03-003
            measure: >- 
              DETECTION: Implement Kubernetes Runtime Monitoring
            comment: >-
              In case of AWS EKS usage, AWS GuardDuty has an agent for this. 
              Also you can consider open-source solutions like Tetragon or Falco. 
            mitre: undefined
            tags: kubernetes
      - code: SEC04-BP04
        text: Initiate remediation for non-compliant resources
        action_items:
          - measure_id: SEC04-BP04-001
            measure: >-
              DETECTION: Implement Cloud Security Posture Management System (CSPM)
            comment: >-  
              Use AWS SecurityHub to detect non-compliant resources. There is also open-source tools like 
              Prowler.
            mitre: undefined
            tags: aws
          - measure_id: SEC04-BP04-002
            measure: >-
              MITIGATION: Implement IaC security scanning
            comment: >-  
              Consider Trivy/Checkov/Kics to scan your IaC code for misconfigurations as part of the CI pipeline.
              <br>
              <br>
              Note: Checkov doesn't provide information about the severity of the misconfiguration. In case of Terraform modules usage,
              the better scan quality can be achived using Terrform plan output scanning option. Trivy supports this.
            mitre: undefined
            tags: aws
          - measure_id: SEC04-BP04-003
            measure: >-
              DETECTION: Implement Kubernetes Security Posture Management System (KSPM)
            comment: >-
              There is <a target="_blank" class="new-window href="https://github.com/aquasecurity/trivy-operator">
              trivy-operator</a> to detect non-compliant resources.
            mitre: undefined
            tags: kubernetes
          - measure_id: SEC04-BP04-004
            measure: >-
              MITIGATION: Implement dynamic admission controller in a Kubernetes cluster
            comment: >-
              Consider Kyverno or OPA Gatekeeper to prevent insecure changes and inline hardening.
            mitre: undefined
            tags: kubernetes
          - measure_id: SEC04-BP04-005
            measure: >-
              DETECTION: Implement helm chart security scanning into the CI pipeline
            mitre: undefined
            tags: kubernetes
  - name: Infrastructure Protection
    security_controls:
      - code: SEC05-BP01
        text: Create network layers
        action_items:
          - measure_id: SEC05-BP01-001
            measure: >-
              MITIGATION: Maintain VPCs and subnets with/without Internet access
            mitre: undefined
            tags: aws
      - code: SEC05-BP02
        text: Control traffic flow within your network layers
        action_items:
          - measure_id: SEC05-BP02-001
            measure: >-
              MITIGATION: Control traffic flow within your network layers
            comment: >-
              Deploy AWS Network Firewall, configure AWS Security Groups.
            mitre: undefined
            tags: aws
          - measure_id: SEC05-BP02-002
            measure: >-
              MITIGATION: Control traffic flow between the pods
            comment: >-
              Consider Istio or Cilium.
            mitre: undefined
            tags: kubernetes
      - code: SEC05-BP03
        text: Implement inspection-based protection
        action_items:
          - measure_id: SEC05-BP03-001
            measure: >-
              DETECTION: Implement Network Intrusion Detection System
            comment: >-
              AWS Guarduty can analyze network flow and DNS requests. Consider open-source solutions like Suricata or Snort
            mitre: undefined
            tags: aws
          - measure_id: SEC05-BP03-002
            measure: >-
                MITIGATION: Implement Web Application Firewall
            comment: >-
              Use AWS WAF or Imperva/CloudFlare.
            mitre: undefined
            tags: aws
      - code: SEC05-BP04
        text: Automate network protection
        action_items:
          - measure_id: SEC05-BP04-001
            measure: >-
              MITIGATION: Automate network protection
            mitre: undefined
            tags: aws
      - code: SEC06-BP01
        text: Perform vulnerability management
        action_items:
          - measure_id: SEC06-BP01-001
            measure: >-
              DETECTION: Scan EC2 instances for vulnerabilities
            comment: >-
              Use AWS Inspector. It supports both agent and agentless scanning options. 
              <br>
              <br>
              Consider open-source tool like Wazuh Agent. Rely on Exploit Prediction Scoring System (EPSS), environment (prod, staging, dev, etc.) and host exposure 
              (internal, internet-facing) to get the right prioritization of the findings.
            mitre: undefined
            tags: aws
          - measure_id: SEC06-BP01-002
            measure: >-
              DETECTION: Scan docker images for vulnerabilities 
            comment: >-
              Consider Amazon ECR vulnerability scanning feature. 
              <br>
              <br>
              <a target="_blank" class="new-window" href="https://trivy.dev/latest/docs/target/container_image/">Trivy</a> 
              also has docker images scanning capabilities.
            mitre: undefined
            tags: kubernetes
      - code: SEC06-BP02
        text: Provision compute from hardened images
        action_items:
          - measure_id: SEC06-BP02-001
            measure: >-
              MITIGATION: Provision compute from hardened images. 
            comment: >-
              Consider AWS managed AMIs.
            mitre: undefined
            tags: aws
          - measure_id: SEC06-BP02-002
            measure: >-
              MITIGATION: Implement distroless images. 
            comment: >-
              Consider the tool <a target="_blank" class="new-window" href="https://www.rapidfort.com/">RapidFort</a>
            mitre: undefined
            tags: kubernetes
      - code: SEC06-BP03
        text: Reduce manual management and interactive access
        action_items:
          - measure_id: SEC06-BP03-001
            measure: >-
              MITIGATION: Reduce manual management and interactive access
            comment: >-
              Use AWS Systems Manager or Ansible/Chef/Puppet. Implement strict
              security controls regarding access management to configuration
              management tools.
            mitre: Execution:CloudAdministrationCommand
            tags: aws
          - measure_id: SEC06-BP03-002
            measure: >-
              DETECTION: Detect command execution on EC2 instances
            comment: >-
              Anaylyze AWS CloudTrail logs to detect command execution on EC2 instances via AWS Systems Manager.
              Configure alerts for suspicious command execution.
            mitre: Execution:CloudAdministrationCommand
            tags: aws
      - code: SEC06-BP04
        text: Validate software integrity
        action_items:
          - measure_id: SEC06-BP04-001
            measure: >-
              MITIGATION:: Validate software integrity on EC2 instances
            comment: >-
              Consider osquery to validate software integrity or Wazuh File Integrity Monitoring (FIM).
              <br>
              <br>
              Check software packages signatures to validate software integrity.
              <br>
              <br>
              EBPF-based FIM like Falco or Tetragon can be used to detect suspicious file changes.
            mitre: undefined
            tags: aws
          - measure_id: SEC06-BP04-002
            measure: >-
              MITIGATION:: Validate software integrity on Kubernetes clusters
            comment: >-
              Consider AWS Signer to validate software integrity. It can be used to validate the integrity of the container images.
            mitre: undefined
            tags: kubernetes
      - code: SEC06-BP05
        text: Automate compute protection
        action_items:
          - measure_id: SEC06-BP05-001
            measure: >-
              MITIGATION: Automate compute protection. Use AWS Tags to manage your resources
            mitre: undefined
            tags: aws
  - name: Data Protection
    security_controls:
      - code: SEC07-BP01
        text: Understand your data classification scheme
        action_items:
          - measure_id: SEC07-BP01-001
            measure: >-
              DETECTION: Understand your data classification scheme
            mitre: undefined
            tags: aws
      - code: SEC07-BP02
        text: Apply data protection controls based on data sensitivity
        action_items:
          - measure_id: SEC07-BP02-001
            measure: >-
              MITIGATION: Apply data protection controls based on data sensitivity
            mitre: undefined
            tags: aws
      - code: SEC07-BP03
        text: Automate identification and classification
        action_items:
          - measure_id: SEC07-BP03-001
            measure: >-
              DETECTION: Automate identification and classification
            comment: >-
              Consider AWS Macie to detect resources with sensitive data.
            mitre: undefined
            tags: aws
          - measure_id: SEC07-BP03-002
            measure: >-
              DETECTION: Automate sensitive data observability in Kubernetes clusters
            comment: >-
              Consider DSPM Soveren.io to detect sensitive data in Kubernetes clusters.
            mitre: undefined
            tags: kubernetes
      - code: SEC07-BP04
        text: Define scalable data lifecycle management
        action_items:
          - measure_id: SEC07-BP04-001
            measure: >-
              MITIGATION: Define data retention policy
            comment: >-
              Use AWS S3 Lifecycle Policies or AWS EBS Snapshots.
            mitre: undefined
            tags: aws
          - measure_id: SEC07-BP04-002
            measure: >- 
              MITIGATION: Don't store any sensitive data inside the container
            comment: >-
              Consider read-only file system for containers to reduce the risk of data leakage.
            mitre: undefined
            tags: kubernetes
      - code: SEC08-BP01
        text: Implement secure key management
        action_items:
          - measure_id: SEC08-BP01-001
            measure: >-
              MITIGATION: Implement secure key management
            mitre: undefined
            tags: aws
      - code: SEC08-BP02
        text: Enforce encryption at rest
        action_items:
          - measure_id: SEC08-BP02-001
            measure: >-
              MITIGATION: Enforce encryption at rest
            mitre: undefined
            tags: aws
      - code: SEC08-BP03
        text: Automate data at rest protection
        action_items:
          - measure_id: SEC08-BP03-001
            measure: >-
              MITIGATION: Automate data at rest protection
            mitre: undefined
            tags: aws
      - code: SEC08-BP04
        text: Enforce access control
        action_items:
          - measure_id: SEC08-BP04-001
            measure: >-
              MITIGATION: Use AWS tags to manage access based on data sensitivity
            mitre: undefined
            tags: aws
      - code: SEC09-BP01
        text: Implement secure key and certificate management
        action_items:
          - measure_id: SEC09-BP01-001
            measure: >-
              MITIGATION: Deploy PKI infrastructure. Use AWS Certificate Manager to manage your certificates
            mitre: undefined
            tags: aws
      - code: SEC09-BP02
        text: Enforce encryption in transit
        action_items:
          - measure_id: SEC09-BP02-001
            measure: >-
              MITIGATION: Enforce encryption in transit. Enforce strict security policies to your 
              Application Load Balancer
            mitre: undefined
            tags: aws
          - measure_id: SEC09-BP02-002
            measure: 'MITIGATION: Enforce encryption in transit inside the Kubernetes cluster.  Deploy Istio or Cilium'
            mitre: undefined
            tags: kubernetes
      - code: SEC09-BP03
        text: Authenticate network communications
        action_items:
          - measure_id: SEC09-BP03-001
            measure: >-
              MITIGATION: Use TLS certificates to authenticate the network communications
            mitre: undefined
            tags: aws
          - measure_id: SEC09-BP03-002
            measure: >-
              MITIGATION: Implement mutual TLS (mTLS) authentication between the services
            mitre: undefined
            tags: kubernetes
  - name: Incident Response
    security_controls:
      - code: SEC10-BP01
        text: Identify key personnel and external resources
        action_items:
          - measure_id: SEC10-BP01-001
            measure: >-
              DETECTION: Build the SOC team and define its responsibilities and scope
            mitre: undefined
            tags: aws
      - code: SEC10-BP02
        text: Develop incident management plans
        action_items:
          - measure_id: SEC10-BP02-001
            measure: >-
              DETECTION: Develop incident management plans.  Use AWS Security Orchestration, Automation, and Response
              (SOAR)
            mitre: undefined
            tags: aws
      - code: SEC10-BP03
        text: Prepare forensic capabilities
        action_items:
          - measure_id: SEC10-BP03-001
            measure: >-
              DETECTION: Review AWS CloudTrail and AWS CloudWatch from the forensic standpoint
            mitre: undefined
            tags: aws
          - measure_id: SEC10-BP03-002
            measure: >-
              DETECTION: Review Kubernetes logs from the forensic standpoint
            mitre: undefined
            tags: kubernetes
      - code: SEC10-BP04
        text: Develop and test security incident response playbooks
        action_items:
          - measure_id: SEC10-BP04-001
            measure: >-
              DETECTION: Develop and test security incident response playbooks
            mitre: undefined
            tags: aws
      - code: SEC10-BP05
        text: Pre-provision access
        action_items:
          - measure_id: SEC10-BP05-001
            measure: >-
              MITIGATION: Pre-provision access to AWS accounts
            mitre: undefined
            tags: aws
          - measure_id: SEC10-BP05-002
            measure: >-
              MITIGATION: Pre-provision access to Kubernetes clusters
            mitre: undefined
            tags: kubernetes
      - code: SEC10-BP06
        text: Pre-deploy tools
        action_items:
          - measure_id: SEC10-BP06-001
            measure: >-
              MITIGATION: Pre-deploy tools like Case Management System, Sandbox, etc.
            mitre: undefined
            tags: aws
      - code: SEC10-BP07
        text: Run simulations
        action_items:
          - measure_id: SEC10-BP07-001
            measure: >-
              DETECTION: Run simulations to test the incident response playbooks
            mitre: undefined
            tags: aws
      - code: SEC10-BP08
        text: Post-incident activity
        action_items:
          - measure_id: SEC10-BP08-001
            measure: >-
              MITIGATION: Implement lessons learned from the post-incident activity
            mitre: undefined
            tags: aws
  - name: Application Security
    security_controls:
      - code: SEC11-BP01
        text: Train for application security
        action_items:
          - measure_id: SEC11-BP01-001
            measure: >-
              MITIGATION: Train Developer and QA teams for application security
            mitre: undefined
            tags: aws
      - code: SEC11-BP02
        text: Automate testing throughout the development and release lifecycle
        action_items:
          - measure_id: SEC11-BP02-001
            measure: >-
              DETECTION: Automate testing throughout the development and release lifecycle
            mitre: undefined
            tags: aws
      - code: SEC11-BP03
        text: Perform regular penetration testing
        action_items:
          - measure_id: SEC11-BP03-001
            measure: >-
              DETECTION: Perform regular penetration testing
            mitre: undefined
            tags: aws
          - measure_id: SEC11-BP03-002
            measure: >-
              DETECTION: Implement Bug Bounty program
            comment: >-
              Consider HackerOne or Bugcrowd for this.
            mitre: undefined
            tags: aws
      - code: SEC11-BP04
        text: Conduct code reviews
        action_items:
          - measure_id: SEC11-BP04-001
            measure: >-
              DETECTION: Conduct code reviews
            comment: >-
              Consider manual code review or AI Assistant like CodeRabbit.
            mitre: undefined
            tags: aws
      - code: SEC11-BP05
        text: Centralize services for packages and dependencies
        action_items:
          - measure_id: SEC11-BP05-001
            measure: >-
              MITIGATION: Centralize services for packages and dependencies
            mitre: undefined
            tags: aws
      - code: SEC11-BP06
        text: Deploy software programmatically
        action_items:
          - measure_id: SEC11-BP06-001
            measure: >-
              MITIGATION: Deploy software programmatically
            mitre: undefined
            tags: aws
      - code: SEC11-BP07
        text: Regularly assess security properties of the pipelines
        action_items:
          - measure_id: SEC11-BP07-001
            measure: >-
              MITIGATION: Regularly assess security properties of the pipelines
            mitre: undefined
            tags: aws
      - code: SEC11-BP08
        text: Build a program that embeds security ownership in workload teams
        action_items:
          - measure_id: SEC11-BP08-001
            measure: >-
              MITIGATION: Build a program that embeds security ownership in workload teams
            comment: >- 
              Consider Internal Developer Portal for this like Backstage from Spotify.
            mitre: undefined
            tags: aws